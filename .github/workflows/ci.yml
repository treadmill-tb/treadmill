name: treadmill-end-to-end-ci
on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
env:
  TERM: xterm
  POSTGRES_DB: tml_switchboard
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo apt-get install -y jq
      - name: Set up database
        run: |
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/SCHEMA.sql
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/FIXTURES.sql
          # Update the existing token in the database
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -c "UPDATE api_tokens SET token = decode('B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fyuzvHsbBQOvnN+/RpB7OvVJjRYhldlSY4iFsNZq5XpO8fXiqRN6O/gn+nP5cA1J6ox2d2jV32TGzahTZAQZUFwIsI11Mye+Jus97L1e+l3O/0yBt/sywoJFFwkUVOFX8=', 'base64') WHERE token_id = '3be73eea-192f-46c0-af01-92f574290c81';"
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Build components
        run: |
          cargo build --package tml-switchboard
          cargo build --package tml-mock-supervisor
          cargo build --package tml-puppet
      - name: Generate test configurations
        run: "cp switchboard/switchboard/config.example.toml switchboard_config.toml\ncp supervisor/mock/config.example.toml mock_supervisor_config.toml\n\n# Edit switchboard config\nsed -i 's/port = 5400/port = 5432/' switchboard_config.toml\nsed -i 's/password = \"\"/password = \"postgres\"/' switchboard_config.toml\nsed -i 's/socket_addr = \"0.0.0.0:443\"/socket_addr = \"0.0.0.0:8080\"/' switchboard_config.toml\n\n# Comment out SSL configuration in switchboard config\nsed -i 's/^#*\\[server\\.dev_mode_ssl\\]/# [server.dev_mode_ssl]/' switchboard_config.toml\nsed -i 's/^#*cert/# cert/' switchboard_config.toml\nsed -i 's/^#*key/# key/' switchboard_config.toml\n\n# Edit mock supervisor config\nsed -i 's/switchboard_uri = \"wss:\\/\\/localhost:443\"/switchboard_uri = \"ws:\\/\\/localhost:8080\"/' mock_supervisor_config.toml\nsed -i 's|token = \".*\"|token = \"B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fyuzvHsbBQOvnN+/RpB7OvVJjRYhldlSY4+iFsNZq5XpO8fXiqRN6O/gn+nP5cA1J6ox2d2jV32TGzahTZAQZUFwIsI11Mye+Jus97L1e+l3O/0+yBt/sywoJFFwkUVOFX8=\"|' mock_supervisor_config.toml\n\n# Display the contents of the configs for verification\necho \"Switchboard config:\"\ncat switchboard_config.toml\n\necho \"Mock supervisor config:\"\ncat mock_supervisor_config.toml      \n"
      - name: Verify token in database
        run: |
          token_from_db=$(psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -t -c "SELECT encode(token, 'base64') FROM api_tokens WHERE token_id = '3be73eea-192f-46c0-af01-92f574290c81';" | tr -d ' \n')
          echo "Token from database: $token_from_db"
          token_in_config=$(grep 'token =' mock_supervisor_config.toml | cut -d'"' -f2)
          echo "Token in mock supervisor config: $token_in_config"
          if [ "$token_from_db" != "$token_in_config" ]; then
            echo "Tokens do not match!"
            exit 1
          else
            echo "Tokens match successfully!"
          fi
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Start switchboard
        run: |
          export RUST_LOG=debug
          cargo run --package tml-switchboard -- serve -c switchboard_config.toml > switchboard.log 2>&1 &
          echo $! > switchboard.pid
          sleep 5
      - name: Start mock supervisor
        run: "cargo build --package tml-puppet\nRUST_LOG=debug cargo run --package tml-mock-supervisor -- -c mock_supervisor_config.toml --puppet-binary ./target/debug/tml-puppet > mock_supervisor.log 2>&1 &\necho $! > mock_supervisor.pid\nsleep 5     \n"
      - name: Check mock supervisor log
        run: cat mock_supervisor.log
      - name: Run E2E API tests
        run: |
          # Set up variables
          tml_supervisor="7d55ec6d-15e7-4b84-8c04-7c085fe60df4"
          tml_image_id="46ebc6946f7c4a10922bf1f539cd7351ce8670781e081d18babf1affdef6f577"
          tml_token="B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fyuzvHsbBQOvnN+/RpB7OvVJjRYhldlSY4iFsNZq5XpO8fXiqRN6O/gn+nP5cA1J6ox2d2jV32TGzahTZAQZUFwIsI11Mye+Jus97L1e+l3O/0yBt/sywoJFFwkUVOFX8="

          echo "Using token: $tml_token"
          echo "Checking switchboard status..."
          switchboard_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health)
          if [ "$switchboard_status" != "200" ]; then
            echo "Switchboard is not responding correctly. Status: $switchboard_status"
            exit 1
          fi

          echo "Sending job creation request..."
          job_response=$(curl -v -X POST "http://localhost:8080/api/v1/job/queue" \
            -H "Authorization: Bearer $tml_token" \
            -H "Content-Type: application/json" \
            -d "{
              \"supervisor_id\": \"$tml_supervisor\",
              \"job_request\": {
                \"request_id\": \"$(uuidgen)\",
                \"init_spec\": {
                  \"type\": \"image\",
                  \"image_id\": \"$tml_image_id\"
                },
                \"ssh_keys\": [],
                \"restart_policy\": {
                  \"remaining_restart_count\": 0
                },
                \"ssh_rendezvous_servers\": [],
                \"parameters\": {},
                \"tag_config\": \"\",
                \"override_timeout\": null
              }
            }")

          echo "Create job response: $job_response"

          job_id=$(echo "$job_response" | jq -r '.job_id // empty')

          if [ -z "$job_id" ]; then
            echo "Failed to create job"
            exit 1
          fi

          echo "Created job with ID: $job_id"

          # Wait for the job to start (you might need to adjust the sleep time)
          sleep 10

          # Check job status
          status_response=$(curl -s -X GET "http://localhost:8080/api/v1/job/$job_id/status" \
            -H "Authorization: Bearer $tml_token")

          echo "Status response: $status_response"

          job_status=$(echo "$status_response" | jq -r '.state // empty')

          echo "Job status: $job_status"

          # Cancel the job
          cancel_response=$(curl -s -X DELETE "http://localhost:8080/api/v1/job/$job_id" \
            -H "Authorization: Bearer $tml_token")

          echo "Cancel response: $cancel_response"
          echo "Cancelled job"

          # Check job status again
          status_response=$(curl -s -X GET "http://localhost:8080/api/v1/job/$job_id/status" \
            -H "Authorization: Bearer $tml_token")

          echo "Status response after cancellation: $status_response"

          job_status=$(echo "$status_response" | jq -r '.state // empty')

          echo "Job status after cancellation: $job_status"

          # Verify the job was cancelled
          if [ "$job_status" != "Cancelled" ]; then
            echo "Job was not cancelled successfully"
            exit 1
          fi

          echo "E2E API test completed successfully"
      - name: Run database interaction tests
        run: |
          echo "TODO"
      - name: Run puppet communication tests
        run: |
          echo "TODO"
        # cargo test --package tml-puppet
      - name: Collect and report results
        run: ''
      - name: Stop services
        run: |
          kill $(cat switchboard.pid) || true
          kill $(cat mock_supervisor.pid) || true
          cat mock_supervisor.log
      - name: Check for errors in mock supervisor log
        run: "if grep -i error mock_supervisor.log; then\n  echo \"Errors found in mock supervisor log\"\n  exit 1\nfi  \n"
  ci-format:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: rustfmt check
        uses: actions-rust-lang/rustfmt@v1
  ci-build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build all crates
        run: |
          # Pass --locked to ensure that the lockfile in the repository stays current
          cargo build --locked

#           cp switchboard/switchboard/config.example.toml switchboard_config.toml
#           cp supervisor/mock/config.example.toml mock_supervisor_config.toml
#
#           # Edit switchboard config
#           sed -i 's/port = 5400/port = 5432/' switchboard_config.toml
#           sed -i 's/password = ""/password = "postgres"/' switchboard_config.toml
#           sed -i 's/socket_addr = "0.0.0.0:443"/socket_addr = "0.0.0.0:8080"/' switchboard_config.toml
#
#           # Comment out SSL configuration in switchboard config
#           sed -i 's/^#*\[server\.dev_mode_ssl\]/# [server.dev_mode_ssl]/' switchboard_config.toml
#           sed -i 's/^#*cert/# cert/' switchboard_config.toml
#           sed -i 's/^#*key/# key/' switchboard_config.toml
#
#           # Edit mock supervisor config
#           sed -i 's/switchboard_uri = "wss:\/\/localhost:443"/switchboard_uri = "ws:\/\/localhost:8080"/' mock_supervisor_config.toml
#           sed -i 's|token = ".*"|token = "B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fyuzvHsbBQOvnN+/RpB7OvVJjRYhldlSY4iFsNZq5XpO8fXiqRN6O/gn+nP5cA1J6ox2d2jV32TGzahTZAQZUFwIsI11Mye+Jus97L1e+l3O/0yBt/sywoJFFwkUVOFX8"|' mock_supervisor_config.toml
#
#           # Display the contents of the configs for verification
#           echo "Switchboard config:"
#           cat switchboard_config.toml
#
#           echo "Mock supervisor config:"
#           cat mock_supervisor_config.toml
