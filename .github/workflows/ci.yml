name: treadmill-end-to-end-ci
on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
env:
  TERM: xterm
  POSTGRES_DB: tml_switchboard
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo apt-get install -y jq
      - name: Set up database
        run: |
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/SCHEMA.sql
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/FIXTURES.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Build components
        run: |
          cargo build --package tml-switchboard
          cargo build --package tml-mock-supervisor
          cargo build --package tml-puppet
      - name: Generate test configurations
        run: |
          cp switchboard/switchboard/config.example.toml switchboard_config.toml
          cp supervisor/mock/config.example.toml mock_supervisor_config.toml
          # Edit switchboard config
          sed -i 's/port = 5400/port = 5432/' switchboard_config.toml
          sed -i 's/password = ""/password = "postgres"/' switchboard_config.toml
          sed -i 's/socket_addr = "0.0.0.0:443"/socket_addr = "0.0.0.0:8080"/' switchboard_config.toml
          # Edit mock supervisor config
          sed -i 's/switchboard_uri = "wss:\/\/localhost:443"/switchboard_uri = "ws:\/\/localhost:8080"/' mock_supervisor_config.toml
      - name: Start switchboard
        run: |
          cargo run --package tml-switchboard -- serve -c switchboard_config.toml &
          echo $! > switchboard.pid
          sleep 5
      - name: Start mock supervisor
        run: |
          cargo build --package tml-puppet
          nohup cargo run --package tml-mock-supervisor -- -c mock_supervisor_config.toml --puppet-binary ./target/debug/tml-puppet > mock_supervisor.log 2>&1 &
          echo $! > mock_supervisor.pid
          sleep 5
      - name: Check mock supervisor log
        run: cat mock_supervisor.log
      - name: Run E2E API tests
        run: |
          # Set up variables
          tml_supervisor="7d55ec6d-15e7-4b84-8c04-7c085fe60df4"
          tml_image_id="46ebc6946f7c4a10922bf1f539cd7351ce8670781e081d18babf1affdef6f577"
          tml_token="B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fy"

          # Login and get a session token
          session_token=$(curl -s -X POST "http://localhost:8080/session/login" \
            -H "Content-Type: application/json" \
            -d "{\"token\": \"$tml_token\"}" | jq -r '.token')

          if [ -z "$session_token" ]; then
            echo "Failed to obtain session token"
            exit 1
          fi

          # Create a job
          job_id=$(curl -s -X POST "http://localhost:8080/api/v1/job/queue" \
            -H "Authorization: Bearer $session_token" \
            -H "Content-Type: application/json" \
            -d "{
              \"supervisor_id\": \"$tml_supervisor\",
              \"job_request\": {
                \"request_id\": \"$(uuidgen)\",
                \"init_spec\": {
                  \"type\": \"image\",
                  \"image_id\": \"$tml_image_id\"
                },
                \"ssh_keys\": [],
                \"restart_policy\": {
                  \"remaining_restart_count\": 0
                },
                \"ssh_rendezvous_servers\": [],
                \"parameters\": {},
                \"tag_config\": \"\",
                \"override_timeout\": null
              }
            }" | jq -r '.job_id')

          if [ -z "$job_id" ]; then
            echo "Failed to create job"
            exit 1
          fi

          echo "Created job with ID: $job_id"

          # Wait for the job to start (you might need to adjust the sleep time)
          sleep 10

          # Check job status
          job_status=$(curl -s -X GET "http://localhost:8080/api/v1/job/$job_id/status" \
            -H "Authorization: Bearer $session_token" | jq -r '.state')

          echo "Job status: $job_status"

          # Cancel the job
          curl -s -X DELETE "http://localhost:8080/api/v1/job/$job_id" \
            -H "Authorization: Bearer $session_token"

          echo "Cancelled job"

          # Check job status again
          job_status=$(curl -s -X GET "http://localhost:8080/api/v1/job/$job_id/status" \
            -H "Authorization: Bearer $session_token" | jq -r '.state')

          echo "Job status after cancellation: $job_status"

          # Verify the job was cancelled
          if [ "$job_status" != "Cancelled" ]; then
            echo "Job was not cancelled successfully"
            exit 1
          fi

          echo "E2E API test completed successfully"
      - name: Run database interaction tests
        run: |
          echo "TODO"
      - name: Run puppet communication tests
        run: |
          echo "TODO"
        # cargo test --package tml-puppet
      - name: Collect and report results
        run: ''
      - name: Stop services
        run: |
          kill $(cat switchboard.pid) || true
          kill $(cat mock_supervisor.pid) || true
          cat mock_supervisor.log
      - name: Check for errors in mock supervisor log
        run: "if grep -i error mock_supervisor.log; then\n  echo \"Errors found in mock supervisor log\"\n  exit 1\nfi  \n"
  ci-format:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: rustfmt check
        uses: actions-rust-lang/rustfmt@v1
  ci-build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build all crates
        run: |
          # Pass --locked to ensure that the lockfile in the repository stays current
          cargo build --locked
