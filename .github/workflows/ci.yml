name: treadmill-end-to-end-ci
on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
env:
  TERM: xterm
  POSTGRES_DB: tml_switchboard
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo apt-get install -y jq
      - name: Set up database
        run: |
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/SCHEMA.sql
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/FIXTURES.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Build components
        run: |
          cargo build --package tml-switchboard
          cargo build --package tml-mock-supervisor
          cargo build --package tml-puppet
      - name: Generate test configurations
        run: |
          cp switchboard/switchboard/config.example.toml switchboard_config.toml
          cp supervisor/mock/config.example.toml mock_supervisor_config.toml
          # Edit switchboard config
          sed -i 's/port = 5400/port = 5432/' switchboard_config.toml
          sed -i 's/password = ""/password = "postgres"/' switchboard_config.toml
          sed -i 's/socket_addr = "0.0.0.0:443"/socket_addr = "0.0.0.0:8080"/' switchboard_config.toml
          # Edit mock supervisor config
          sed -i 's/switchboard_uri = "wss:\/\/localhost:443"/switchboard_uri = "ws:\/\/localhost:8080"/' mock_supervisor_config.toml
      - name: Start switchboard
        run: |
          cargo run --package tml-switchboard -- serve -c switchboard_config.toml &
          echo $! > switchboard.pid
          sleep 5
      - name: Start mock supervisor
        run: |
          cargo build --package tml-puppet
          nohup cargo run --package tml-mock-supervisor -- -c mock_supervisor_config.toml --puppet-binary ./target/debug/tml-puppet > mock_supervisor.log 2>&1 &
          echo $! > mock_supervisor.pid
          sleep 5
      - name: Check mock supervisor log
        run: cat mock_supervisor.log
      - name: Run E2E API tests
        run: "# Set up variables\ntml_supervisor=\"7d55ec6d-15e7-4b84-8c04-7c085fe60df4\"\ntml_image_id=\"46ebc6946f7c4a10922bf1f539cd7351ce8670781e081d18babf1affdef6f577\"\ntml_token=\"B1oy2ko1wVdGKbvKc/9dKi7ggZYLTLzdm2As4CWV15fy\"\n\n# Login (skipping this step as we're using a pre-defined token)\n# Instead, we'll use the token directly\n\necho \"Using pre-defined token: $tml_token\"\n\n# Create a job\njob_response=$(curl -s -X POST \"http://localhost:8080/api/v1/job/queue\" \\\n  -H \"Authorization: Bearer $tml_token\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\n    \\\"supervisor_id\\\": \\\"$tml_supervisor\\\",\n    \\\"job_request\\\": {\n      \\\"request_id\\\": \\\"$(uuidgen)\\\",\n      \\\"init_spec\\\": {\n        \\\"type\\\": \\\"image\\\",\n        \\\"image_id\\\": \\\"$tml_image_id\\\"\n      },\n      \\\"ssh_keys\\\": [],\n      \\\"restart_policy\\\": {\n        \\\"remaining_restart_count\\\": 0\n      },\n      \\\"ssh_rendezvous_servers\\\": [],\n      \\\"parameters\\\": {},\n      \\\"tag_config\\\": \\\"\\\",\n      \\\"override_timeout\\\": null\n    }\n  }\")\n\necho \"Create job response: $job_response\"\n\njob_id=$(echo \"$job_response\" | jq -r '.job_id // empty')\n\nif [ -z \"$job_id\" ]; then\n  echo \"Failed to create job\"\n  exit 1\nfi\n\necho \"Created job with ID: $job_id\"\n\n# Wait for the job to start (you might need to adjust the sleep time)\nsleep 10\n\n# Check job status\nstatus_response=$(curl -s -X GET \"http://localhost:8080/api/v1/job/$job_id/status\" \\\n  -H \"Authorization: Bearer $tml_token\")\n\necho \"Status response: $status_response\"\n\njob_status=$(echo \"$status_response\" | jq -r '.state // empty')\n\necho \"Job status: $job_status\"\n\n# Cancel the job\ncancel_response=$(curl -s -X DELETE \"http://localhost:8080/api/v1/job/$job_id\" \\\n  -H \"Authorization: Bearer $tml_token\")\n\necho \"Cancel response: $cancel_response\"\necho \"Cancelled job\"\n\n# Check job status again\nstatus_response=$(curl -s -X GET \"http://localhost:8080/api/v1/job/$job_id/status\" \\\n  -H \"Authorization: Bearer $tml_token\")\n\necho \"Status response after cancellation: $status_response\"\n\njob_status=$(echo \"$status_response\" | jq -r '.state // empty')\n\necho \"Job status after cancellation: $job_status\"\n\n# Verify the job was cancelled\nif [ \"$job_status\" != \"Cancelled\" ]; then\n  echo \"Job was not cancelled successfully\"\n  exit 1\nfi\n\necho \"E2E API test completed successfully\"      \n"
      - name: Run database interaction tests
        run: |
          echo "TODO"
      - name: Run puppet communication tests
        run: |
          echo "TODO"
        # cargo test --package tml-puppet
      - name: Collect and report results
        run: ''
      - name: Stop services
        run: |
          kill $(cat switchboard.pid) || true
          kill $(cat mock_supervisor.pid) || true
          cat mock_supervisor.log
      - name: Check for errors in mock supervisor log
        run: "if grep -i error mock_supervisor.log; then\n  echo \"Errors found in mock supervisor log\"\n  exit 1\nfi  \n"
  ci-format:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: rustfmt check
        uses: actions-rust-lang/rustfmt@v1
  ci-build:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build all crates
        run: |
          # Pass --locked to ensure that the lockfile in the repository stays current
          cargo build --locked
