name: CLI Tests
on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
env:
  TERM: xterm
  POSTGRES_DB: tml_switchboard
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
jobs:
  comprehensive-cli-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq
      - name: Set up database
        run: |
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/SCHEMA.sql
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/FIXTURES.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Build components
        run: |
          cargo build --package tml-switchboard
          cargo build --package tml-mock-supervisor
          cargo build --package tml-puppet
          cargo build --package tml-switchboard-cli
          cp ./target/debug/tml-switchboard-cli ./switchboard-cli
      - name: Generate test configurations
        run: |
          cp switchboard/switchboard/config.example.toml switchboard_config.toml
          cp supervisor/mock/config.example.toml mock_supervisor_config.toml
          cp switchboard/cli/config.example.toml cli_config.toml
          sed -i 's/port = 5400/port = 5432/' switchboard_config.toml
          sed -i 's/password = ""/password = "postgres"/' switchboard_config.toml
          sed -i 's/socket_addr = "0.0.0.0:443"/socket_addr = "0.0.0.0:8080"/' switchboard_config.toml
          sed -i 's/switchboard_uri = "wss:\/\/localhost:443"/switchboard_uri = "ws:\/\/localhost:8080"/' mock_supervisor_config.toml
          sed -i 's/coord_connector = "cli_connector"/coord_connector = "ws_connector"/' mock_supervisor_config.toml
      - name: Start switchboard
        run: |
          export RUST_LOG=debug
          cargo run --package tml-switchboard -- serve -c switchboard_config.toml > switchboard.log 2>&1 &
          echo $! > switchboard.pid
          sleep 3
      - name: Start mock supervisor
        run: |
          cargo build --package tml-puppet
          nohup cargo run --package tml-mock-supervisor -- -c mock_supervisor_config.toml --puppet-binary ./target/debug/tml-puppet > mock_supervisor.log 2>&1 &
          echo $! > mock_supervisor.pid
          sleep 3
      - name: Check mock supervisor log
        run: cat mock_supervisor.log
      - name: Check for supervisor panic
        run: |
          if grep -q "thread '.*' panicked at" mock_supervisor.log; then
            echo "Supervisor panicked. Failing the CI."
            exit 1
          fi
      - name: Run comprehensive CLI tests
        run: |
          set -e
          set -x

          export tml_supervisor="7d55ec6d-15e7-4b84-8c04-7c085fe60df4"
          export tml_image_id="46ebc6946f7c4a10922bf1f539cd7351ce8670781e081d18babf1affdef6f577"
          export tml_username="fake_user1"
          export tml_password="FAKEFAKE"
          export RUST_LOG=debug
          export tml_token

          # Test login
          echo "Testing login..."
          ./switchboard-cli --log -c cli_config.toml login "${tml_username}" "${tml_password}"

          # Test job enqueue
          echo "Testing job enqueue..."
          job_response=$(./switchboard-cli --log -c cli_config.toml job enqueue "${tml_supervisor}" "${tml_image_id}")
          echo "Create job response: ${job_response}"
          job_id=$(echo "${job_response}" | grep -oP '"job_id":"[a-f0-9-]+"' | cut -d'"' -f4)
          if [ -z "${job_id}" ]; then
            echo "Failed to extract job ID from response"
            exit 1
          fi
          echo "Created job with ID: ${job_id}"

          # Test job status
          echo "Testing job status..."
          sleep 1
          status_response=$(./switchboard-cli --log -c cli_config.toml job status "${job_id}")
          echo "Status response: ${status_response}"
          job_status=$(echo "${status_response}" | grep -oP 'job_state: \K\w+')
          echo "Job status: ${job_status}"

          # Test job list
          # echo "Testing job list..."
          # list_response=$(./switchboard-cli --log -c cli_config.toml job list)
          # echo "Job list response: ${list_response}"
          # if ! echo "${list_response}" | grep -q "${job_id}"; then
          #   echo "Created job not found in job list"
          #   exit 1
          # fi

          # Test job cancel
          echo "Testing job cancel..."
          cancel_response=$(./switchboard-cli --log -c cli_config.toml job cancel "${job_id}")
          echo "Cancel response: ${cancel_response}"

          # Verify cancellation
          sleep 1
          status_response=$(./switchboard-cli --log -c cli_config.toml job status "${job_id}")
          job_status=$(echo "${status_response}" | grep -oP 'job_state: \K\w+')
          if [ "${job_status}" != "Finished" ] && [ "${job_status}" != "Cancelled" ]; then
            echo "Job was not cancelled successfully"
            exit 1
          fi

          # Test with invalid inputs
          echo "Testing with invalid inputs..."
          if ./switchboard-cli --log -c cli_config.toml job enqueue "invalid-uuid" "${tml_image_id}"; then
            echo "CLI accepted invalid supervisor UUID"
            exit 1
          fi

          if ./switchboard-cli --log -c cli_config.toml job enqueue "${tml_supervisor}" "invalid-image-id"; then
            echo "CLI accepted invalid image ID"
            exit 1
          fi

          if ./switchboard-cli --log -c cli_config.toml job status "invalid-uuid"; then
            echo "CLI accepted invalid job UUID for status check"
            exit 1
          fi

          # Test with non-existent job
          echo "Testing with non-existent job..."
          non_existent_job_id="00000000-0000-0000-0000-000000000000"
          if ./switchboard-cli --log -c cli_config.toml job status "${non_existent_job_id}"; then
            echo "CLI did not handle non-existent job correctly"
            exit 1
          fi

          echo "Comprehensive CLI tests completed successfully"
      - name: Collect and report results
        run: |
          echo "Test results:"
          echo "Switchboard log:"
          cat switchboard.log
          echo "Mock supervisor log:"
          cat mock_supervisor.log
      - name: Stop services
        run: |
          kill $(cat switchboard.pid) || true
          kill $(cat mock_supervisor.pid) || true
      - name: Check for panics
        run: |
          if grep -q "thread '.*' panicked at" switchboard.log; then
            echo "Switchboard panicked. Failing the CI."
            exit 1
          fi
          if grep -q "thread '.*' panicked at" mock_supervisor.log; then
            echo "Supervisor panicked. Failing the CI."
            exit 1
          fi
