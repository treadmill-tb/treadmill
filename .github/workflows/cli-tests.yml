name: CLI Tests
on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
env:
  TERM: xterm
  POSTGRES_DB: tml_switchboard
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
jobs:
  comprehensive-cli-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq
      - name: Set up database
        run: |
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/SCHEMA.sql
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f switchboard/sql/FIXTURES.sql
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      - name: Build components
        run: |
          cargo build --package tml-switchboard
          cargo build --package tml-mock-supervisor
          cargo build --package tml-puppet
          cargo build --package tml-switchboard-cli
          cp ./target/debug/tml ./tml
      - name: Generate test configurations
        run: |
          cp switchboard/switchboard/config.example.toml switchboard_config.toml
          cp supervisor/mock/config.example.toml mock_supervisor_config.toml
          cp switchboard/config.example.toml cli_config.toml
          sed -i 's/port = 5400/port = 5432/' switchboard_config.toml
          sed -i 's/password = ""/password = "postgres"/' switchboard_config.toml
          sed -i 's/socket_addr = "0.0.0.0:443"/socket_addr = "0.0.0.0:8080"/' switchboard_config.toml
          sed -i 's/switchboard_uri = "wss:\/\/localhost:443"/switchboard_uri = "ws:\/\/localhost:8080"/' mock_supervisor_config.toml
          sed -i 's/coord_connector = "cli_connector"/coord_connector = "ws_connector"/' mock_supervisor_config.toml
      - name: Start switchboard
        run: |
          export RUST_LOG=debug
          cargo run --package tml-switchboard -- serve -c switchboard_config.toml > switchboard.log 2>&1 &
          echo $! > switchboard.pid
          sleep 3
      - name: Start mock supervisor
        run: |
          cargo build --package tml-puppet
          nohup cargo run --package tml-mock-supervisor -- -c mock_supervisor_config.toml --puppet-binary ./target/debug/tml-puppet > mock_supervisor.log 2>&1 &
          echo $! > mock_supervisor.pid
          sleep 3
      - name: Check mock supervisor log
        run: cat mock_supervisor.log
      - name: Check for supervisor panic
        run: |
          if grep -q "thread '.*' panicked at" mock_supervisor.log; then
            echo "Supervisor panicked. Failing the CI."
            exit 1
          fi
      - name: Run comprehensive CLI tests
        run: |
          set -e
          set -x

          export tml_image_id="46ebc6946f7c4a10922bf1f539cd7351ce8670781e081d18babf1affdef6f577"
          export tml_username="fake_user1"
          export tml_password="FAKEFAKE"
          export RUST_LOG=debug
          export tml_token

          # Function to log requests and responses
          log_request_response() {
              echo "REQUEST: $1"
              echo "RESPONSE: $2"
              echo "--------------------"
          }

          # Function to parse job status
          parse_job_status() {
              local status_response="$1"
              if echo "$status_response" | grep -q "JobCanceled"; then
                  echo "Cancelled"
              elif echo "$status_response" | grep -q "Terminated"; then
                  echo "Finished"
              elif echo "$status_response" | grep -q "Inactive"; then
                  echo "Inactive"
              elif echo "$status_response" | grep -q "Active"; then
                  echo "Active"
              else
                  echo "Unknown"
              fi
          }

          # Test login
          echo "Testing login..."
          login_response=$(./tml -v -c cli_config.toml login "${tml_username}" "${tml_password}")
          log_request_response "Login" "$login_response"

          echo "Testing basic job enqueue..."
          job_response=$(./tml -v -c cli_config.toml job enqueue "${tml_image_id}")
          log_request_response "Basic job enqueue" "$job_response"

          if echo "${job_response}" | grep -q "Error:"; then
              echo "Basic job enqueue failed"
              echo "Full response: ${job_response}"
              exit 1
          fi

          echo "Testing job enqueue with all options..."
          job_response=$(./tml -v -c cli_config.toml job enqueue "${tml_image_id}" \
            --ssh-keys "ssh-rsa AAAAB3NzaC1yc2E...,ssh-ed25519 AAAAC3NzaC1lZDI1NTE5..." \
            --restart-count 3 \
            --parameters '{"key1":{"value":"value1","secret":false},"key2":{"value":"value2","secret":true}}' \
            --tag-config 'test_tag_config' \
            --timeout 3600)
          log_request_response "Job enqueue with all options" "$job_response"

          if echo "${job_response}" | grep -q '"type":"internal"'; then
              echo "Job enqueue failed due to internal server error"
              echo "Full response: ${job_response}"
              exit 1
          fi

          job_id=$(echo "${job_response}" | grep -o '"job_id":"[^"]*"' | cut -d'"' -f4)
          if [ -z "${job_id}" ]; then
              echo "Failed to extract job ID from response"
              echo "Full response: ${job_response}"
              exit 1
          fi
          echo "Created job with ID: ${job_id}"

          # Test job status
          echo "Testing job status..."
          sleep 1
          status_response=$(./tml -v -c cli_config.toml job status "${job_id}")
          log_request_response "Job status" "$status_response"

          # Parse job status using the new function
          job_status=$(parse_job_status "$status_response")
          echo "Job status: ${job_status}"

          # Test job cancel
          echo "Testing job cancel..."
          cancel_response=$(./tml -v -c cli_config.toml job cancel "${job_id}")
          log_request_response "Job cancel" "$cancel_response"

          # Verify cancellation
          sleep 1
          status_response=$(./tml -v -c cli_config.toml job status "${job_id}")
          log_request_response "Job status after cancellation" "$status_response"

          # Parse job status using the new function
          job_status=$(parse_job_status "$status_response")
          echo "Job status after cancellation: ${job_status}"

          if [ "${job_status}" != "Finished" ] && [ "${job_status}" != "Cancelled" ]; then
              echo "Job was not cancelled successfully"
              exit 1
          fi

          echo "Job was cancelled successfully"

          # Test with invalid inputs
          echo "Testing with invalid inputs..."
          invalid_response=$(./tml -v -c cli_config.toml job enqueue "invalid-image-id" || true)
          log_request_response "Invalid image ID" "$invalid_response"

          invalid_status_response=$(./tml -v -c cli_config.toml job status "invalid-uuid" || true)
          log_request_response "Invalid job UUID" "$invalid_status_response"

          echo "Testing with non-existent job..."
          non_existent_job_id="00000000-0000-0000-0000-000000000000"
          non_existent_job_response=$(./tml -v -c cli_config.toml job status "${non_existent_job_id}")
          log_request_response "Non-existent job" "$non_existent_job_response"

          if echo "${non_existent_job_response}" | grep -q "unauthorized"; then
              echo "CLI correctly handled non-existent job (Unauthorized response)"
          elif echo "${non_existent_job_response}" | grep -q "not found" || echo "${non_existent_job_response}" | grep -q "does not exist"; then
              echo "CLI correctly handled non-existent job (Not found response)"
          else
              echo "CLI did not handle non-existent job correctly"
              exit 1
          fi

          echo "Comprehensive CLI tests completed successfully"
      - name: Collect and report results
        run: |
          echo "Test results:"
          echo "Switchboard log:"
          cat switchboard.log
          echo "Mock supervisor log:"
          cat mock_supervisor.log
      - name: Stop services
        run: |
          kill $(cat switchboard.pid) || true
          kill $(cat mock_supervisor.pid) || true
      - name: Check for panics
        run: |
          if grep -q "thread '.*' panicked at" switchboard.log; then
            echo "Switchboard panicked. Failing the CI."
            exit 1
          fi
          if grep -q "thread '.*' panicked at" mock_supervisor.log; then
            echo "Supervisor panicked. Failing the CI."
            exit 1
          fi
      - name: Upload config files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: config-files
          path: |
            switchboard_config.toml
            mock_supervisor_config.toml
            cli_config.toml
          retention-days: 7
      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: log-files
          path: |
            switchboard.log
            mock_supervisor.log
          retention-days: 7
